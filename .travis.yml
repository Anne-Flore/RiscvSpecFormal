language: nix
sudo: true
dist: xenial

cache:
  directories:
  - $HOME/riscv64-gcc
  - $HOME/riscv
  - $HOME/haskell-files
  - $HOME/verilator-binary
  - $HOME/.ghcup
  - $HOME/.cabal
  - $HOME/verilog-file

env:
  global:
  - PATH=$HOME/.cabal/bin:$HOME/.ghcup/bin:$HOM:$HOME/verilator-binary/bin:$HOME/riscv64-gcc/riscv64-unknown-elf-gcc-8.2.0-2019.02.0-x86_64-linux-ubuntu14/bin:$PATH
  - COQ=8.9

jobs:
  include:
  - stage: generate_riscv_tests_with_verilator_binary_and_haskell_files
    script:
    - wget https://static.dev.sifive.com/dev-tools/riscv64-unknown-elf-gcc-8.2.0-2019.02.0-x86_64-linux-ubuntu14.tar.gz
    - tar xzf riscv64-unknown-elf-gcc-8.2.0-2019.02.0-x86_64-linux-ubuntu14.tar.gz
    - rm -rf $HOME/riscv64-gcc/*
    - mv riscv64-unknown-elf-gcc-8.2.0-2019.02.0-x86_64-linux-ubuntu14/ $HOME/riscv64-gcc/

    - git clone https://github.com/riscv/riscv-tests
    - cd riscv-tests
    - git submodule update --init --recursive
    - autoconf
    - ./configure --prefix=$HOME/riscv
    - sed -i -e "s/0x80000000/00000000/g" ./env/p/link.ld
    - make -j
    - make install
    - cd ..

  - script:
    - git clone http://git.veripool.org/git/verilator
    - cd verilator
    - autoconf
    - ./configure --prefix=$HOME/verilator-binary
    - make -j 4
    - make install 
    - verilator --version
    - cd ..

  - script:
    - travis_wait 50 nix-build --argstr coq-version-or-url "$COQ"

    - rm -rf $HOME/haskell-files/*
    - mkdir -p $HOME/haskell-files
    - cp *.hs $HOME/haskell-files/

  - script:
    - export BOOTSTRAP_HASKELL_NONINTERACTIVE=1
    - curl https://get-ghcup.haskell.org -sSf | sh
    - ghc --version
    - cabal --version

  - stage: generate_verilog_and_haskell-binary
    script:
    - ghc --version
    - cabal update
    - cabal install hashmap
    - cabal install vector
    - cabal install bv
    - cabal install random
    - cabal install split
    - ls $HOME/haskell-files
    - cp $HOME/haskell-files/* ./Haskell
    - cat Haskell/Target.raw > Haskell/Target.hs
    - echo "rtlMod = model32" >> Haskell/Target.hs
    - cat ./Haskell/HaskellTarget.raw > ./Haskell/HaskellTarget.hs
    - echo "kami_model = (kami_model32, 32)" >> Haskell/HaskellTarget.hs
    - ./Kami/fixHaskell.sh ./Kami
    - ghc -O0 --make -iHaskell -iKami Kami/PrettyPrintVerilog.hs
    - cp Main.raw Main.hs
    - ghc -O0 --make -iHaskell -iKami Main.hs
    - mv ./Main $HOME/verilog-file/Main32
    - rm $HOME/verilog-file/System32.sv
    - while sleep 560; do echo "=====[ $SECONDS seconds still running ]====="; done &
    - ./Kami/PrettyPrintVerilog > $HOME/verilog-file/System32.sv
    - kill %1

  - script:
    - ghc --version
    - cabal update
    - cabal install hashmap
    - cabal install vector
    - cabal install bv
    - cabal install random
    - cabal install split
    - ls $HOME/haskell-files
    - cp $HOME/haskell-files/* ./Haskell
    - cat Haskell/Target.raw > Haskell/Target.hs
    - echo "rtlMod = model64" >> Haskell/Target.hs
    - cat ./Haskell/HaskellTarget.raw > ./Haskell/HaskellTarget.hs
    - echo "kami_model = (kami_model64, 64)" >> Haskell/HaskellTarget.hs
    - ./Kami/fixHaskell.sh ./Kami
    - ghc -O0 --make -iHaskell -iKami Kami/PrettyPrintVerilog.hs
    - cp Main.raw Main.hs
    - ghc -O0 --make -iHaskell -iKami Main.hs
    - mv Main $HOME/verilog-file/Main64
    - rm $HOME/verilog-file/System64.sv
    - while sleep 560; do echo "=====[ $SECONDS seconds still running ]====="; done &
    - ./Kami/PrettyPrintVerilog > $HOME/verilog-file/System64.sv
    - kill %1

  - stage: generate_obj_dir_and_run_tests
    script:
    - sudo apt-get install parallel --yes
    - ls $HOME/verilog-file
    - cp $HOME/verilog-file/Main32 ./Main
    - travis_wait 50 ls $HOME/riscv/share/riscv-tests/isa/rv64u?-p-* | parallel -P 0 -j0 "(file {} | (grep -iq elf && ./runElf.sh --haskell --path {})) || (file {} | grep -viq elf)"

  - script:
    - sudo apt-get install parallel --yes
    - ls $HOME/verilog-file
    - cp $HOME/verilog-file/Main64 ./Main
    - travis_wait 50 ls $HOME/riscv/share/riscv-tests/isa/rv64u?-p-* | parallel -P 0 -j0 "(file {} | (grep -iq elf && ./runElf.sh --haskell --path {})) || (file {} | grep -viq elf)"

  - script:
    - sudo apt-get install clang parallel --yes
    - clang --version

    - ls $HOME/verilog-file
    - cp $HOME/verilog-file/System32.sv ./System.sv
    - verilator --top-module system -Wno-CMPCONST -O0 -Wno-WIDTH --cc System.sv --trace --trace-underscore -Wno-fatal --exe System.cpp
    - make -j -C obj_dir -f Vsystem.mk Vsystem CXX=clang LINK=clang
    - travis_wait 50 ls $HOME/riscv/share/riscv-tests/isa/rv32u?-p-* | parallel -P 0 -j0 "(file {} | (grep -iq elf && ./runElf.sh --path {})) || (file {} | grep -viq elf)"

  - script:
    - sudo apt-get install clang parallel --yes
    - clang --version

    - ls $HOME/verilog-file
    - cp $HOME/verilog-file/System64.sv ./System.sv
    - verilator --top-module system -Wno-CMPCONST -O0 -Wno-WIDTH --cc System.sv --trace --trace-underscore -Wno-fatal --exe System.cpp
    - make -j -C obj_dir -f Vsystem.mk Vsystem CXX=clang LINK=clang
    - travis_wait 50 ls $HOME/riscv/share/riscv-tests/isa/rv64u?-p-* | parallel -P 0 -j0 "(file {} | (grep -iq elf && ./runElf.sh --path {})) || (file {} | grep -viq elf)"

